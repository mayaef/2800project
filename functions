(definec app2 (x :tl y :tl) :tl
  (if (endp x)
    y
    (cons (first x) (app2 (rest x) y))))

(definec len2 (x :tl) :nat
  (if (endp x)
    0
    (+ 1 (len2 (rest x)))))

(defdata lor (listof rational))
(defdata lolor (listof lor))
(defdata lololor (listof lolor))

;; checks to see if the given list of rationals is in descendingp order
;; lor -> bool
(definec descendingp (ls :lor) :bool
  (or (endp (cdr ls))
      (and (> (car ls) (car (cdr ls)))
           (descendingp (cdr ls)))))

;; checks the 2 given lists and makes sure they are in the right order
;; lor lor -> bool
(definec compare-listsp (ls1 :lor ls2 :lor) :bool
  (cond ((and (endp ls1) (endp ls2)) nil)
  ((and (consp ls1) (endp ls2)) t)
        ((and (endp ls1) (consp ls2)) nil)
        (t (or (compare-lists0 (cdr ls1) (cdr ls2)) (> (car ls1) (car ls2))))))



;; checks if the given lolor is a descendingp powerset
;; lolor --> bool
(definec descending-powersetp (ls :lolor) :bool
  (cond ((endp ls) t)
        ((endp (cdr ls)) (descendingp (car ls)))
        (t (and (compare-listsp (car ls) (car (cdr ls)))
                (descendingp (car ls))
                 (descending-powersetp (cdr ls))))))

;; checks if the rational is greater than all the values in the list of rationals
;; rational lor -> bool
(definec gte-allp (x :rational ls :lor) :bool
  (or (lendp ls) (and (> x (car ls)) (gte-allp x (cdr ls)))))

;; adds the given rational to the front of every list in the lolor
;; if it is greater than the first of each list in the lolor
;; rational lolor -> lolor
(definec add-rat (r :rational ls :lolor) :lolor
  (cond ((endp ls) '())
        ((gte-allp r (car ls))
         (cons (cons r (car ls)) (add-rat r (cdr ls))))
        (t (add-rat r (cdr ls)))))

;; function to take in an element and powerset to build new powerset
;; lolor lolor -> lolor
(definec merge-sort (ls1 :lolor ls2 :lolor) :lolor
  (cond
   ((endp ls1) ls2)
   ((endp ls2) ls1)
   ((== (car ls1) (car ls2)) (cons (car ls1) (merge-sort (cdr ls1) (cdr ls2))))
   (t (if (>= (len2 (car ls1)) (len2 (car ls2)))
        (cons (car ls1) (merge-sort (cdr ls1) ls2))
        (cons (car ls2) (merge-sort ls1 (cdr ls2)))))))

;; creates the powerset of the given list of rationals
;; lor -> lolor
(definec powerset (ls :lor) :lolor
  :ic (descendingp ls)
  (cond
   ((endp ls) (cons '() '()))
   (t (merge-sort (add-rat (car ls) (powerset (cdr ls))) (powerset (cdr ls))))))

;; creates a powerset with the given rational
;; rational lolor -> lolor
(definec powerset-cons (x :rational ls :lolor) :lolor
  :ic (descending-powersetp ls)
  (if (or (endp ls) (endp (car ls)) (> x (car (car ls))))
    (merge-sort (add-rat x ls) ls) ls))

;; Checker tests
; descendingp
(check= (descendingp '(4 3 2 1)) t)
(check= (descendingp '(3 2 4 1)) nil)
(check= (descendingp nil) t)
(check= (descendingp '(1)) t)

; compare-listsp
(check= (compare-listsp '() '()) nil)
(check= (compare-listsp '(1) '()) t)
(check= (compare-listsp '() '(1)) nil)
(check= (compare-listsp '(3 1) '(2)) t)
(check= (compare-listsp '(5 3 2) '(5 4 2)) nil)

; descending-powersetp
(check= (descending-powersetp '()) t)
(check= (descending-powersetp '((4 3 2) (4 3 1) (3 2 1))) t)
(check= (descending-powersetp '((4 3 2) (5 3 2))) nil)
(check= (descending-powersetp '((4 3) (4 3 2))) nil)

; gte-allp
(check= (gte-allp 3 '(3 2)) nil)
(check= (gte-allp 4 '(3 2)) t)
(check= (gte-allp 3 '(1 4)) nil)
(check= (gte-allp 5 '(4 3 2 1 0 3)) t)

; add-rat
(check= (add-rat 3 '((2 1))) '((3 2 1)))
(check= (add-rat 2 '((1))) '((2 1)))
(check= (add-rat 4 '((3 2 1))) '((4 3 2 1)))
(check= (add-rat 3 (powerset '(2 1))) '((3 2 1) (3 2) (3 1) (3)))

; merge-sort
(check= (merge-sort '((3 2 1) (3 2) (3 1) (3)) '((2 1) (2) (1) nil))
        '((3 2 1) (3 2) (3 1) (2 1) (3) (2) (1) nil))
(check= (merge-sort nil nil) nil)
(check= (merge-sort '((2 1) (2) (1) nil) nil) '((2 1) (2) (1) nil))
(check= (merge-sort nil '((1) nil)) '((1) nil))

; powerset
(check= (powerset nil) (list nil))
(check= (powerset '(3 2 1)) '((3 2 1) (3 2) (3 1) (2 1) (3) (2) (1) nil))
(check= (powerset '(1)) '((1) nil))

; powerset-cons
(check= (powerset-cons 3 '((2 1) (2) (1) nil)) '((3 2 1) (3 2) (3 1) (2 1) (3) (2) (1) nil))
(check= (powerset-cons 1 nil) nil)
(check= (powerset-cons 2 '((1) nil)) '((2 1) (2) (1) nil))
